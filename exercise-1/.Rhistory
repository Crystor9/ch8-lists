wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Exercise 2: indexing and filtering vectors
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten + next_ten
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers(11)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten + next_ten
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten + next_ten
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers(11)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten + next_ten
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers(11)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers(11)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers(11)
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(1, 100, 2)
even
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(1, 100, 1)
even
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2, 100, 2)
even
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
# Exercise 2: indexing and filtering vectors
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2, 100, 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
test <- all(even %% 2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 == 1] <- 0
phone_numbers
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- asDate()
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date()
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date("8jun2017")
summer_break <- as.Date(x)
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
x <- "8jun2017"
summer_break <- as.Date(x)
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date(x)
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date("%8%6%2017")
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date(%8%6%2017)
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date(06/08/2017)
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date(origin = 06/08/2017)
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date(origin, 06/08/2017)
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date(origin = "2017-06-08")
# Exercise 2: indexing and filtering vectors
install.packages("tidyverse")
install.packages("styler")
install.packages("lintr")
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(firstten, next_ten)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
firstten <- 10:20
styler:::style_active_file()
paste("In", next_birthday - today, "days I'll be ", age + 1)
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, next_birthday) {
make_introduction(name, age)
paste("In", next_birthday - today, "days I'll be ", age + 1)
}
View(make_birthday_intro)
View(make_birthday_intro)
make_birthday_intro(christie, 19, Sys.time())
make_birthday_intro("Christie", 19, Sys.Date())
paste(make_introduction(name, age), "In", next_birthday - today, "days I'll be", age + 1)
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, next_birthday) {
paste(make_introduction(name, age), "In", next_birthday - today, "days I'll be", age + 1)
}
View(make_birthday_intro)
make_birthday_intro("Christie, 19, Sys.Date()")
make_birthday_intro("Christie", 19, Sys.Date())
paste(make_introduction(name, age), /n, "In", next_birthday - today, "days I'll be", age + 1)
paste(make_introduction(name, age), "In", next_birthday - today, "days I'll be", age + 1)
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, next_birthday) {
paste(make_introduction(name, age), "In", next_birthday - today, "days I'll be", age + 1)
}
eate a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Jam", "Eggs", "Bread")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Pasta", "Chicken")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
meals
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
meals
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("rice", "vegetables")
meals
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
meals
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast"], meals["lunch"])
early_meals
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["breakfast"] + meals["lunch"]
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
food_num <- lappy(meals, nchar(meals[1:3]))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
food_num <- lapply(meals, nchar(meals[1:3]))
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals[1:2])
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
food_num <- lapply(meals, length(eals[[1:3]))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
food_num <- lapply(meals, length(eals[[1:3]])
food_num
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
food_num <- lapply(meals, length(eals[[1:3]])
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
food_num <- lapply(meals, length(eals[[1:3]]))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
food_num <- lappy(meals, length(eals[[1:3]]))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
food_num <- lappy(meals, length(eals[[1:3]]))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
food_num <- lapply(meals, length(eals[[1:3]]))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
food_num <- lapply(meals, length(meals[[1:3]]))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
food_num <- lapply(meals, length(meals[[1:2]]))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
food_num <- lapply(meals, length(meals())
food_num
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
food_num <- lapply(meals, length)
food_num
styler:::style_pkg()
styler:::style_active_file()
return (paste(meals, "pizza"))
pizza_vector <- paste(meals, "pizza"))
pizza_vector <- paste(meals, "pizza")
return (pizza_vector)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meals) {
pizza_vector <- paste(meals, "pizza")
return (pizza_vector)
}
add_pizza
add_pizza($lunch)
add_pizza <- function(food) {
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(food) {
pizza_vector <- paste(meals$food, "pizza")
return (pizza_vector)
}
add_pizza(breakfast)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meals) {
pizza_vector <- c(meals, "pizza")
return (pizza_vector)
}
add_pizza(lunch)
add_pizza($lunch)
add_pizza(meals)
pizza_vector <- paste(meals, "pizza")
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meals) {
pizza_vector <- paste(meals, "pizza")
return (pizza_vector)
}
add_pizza(meals)
pizza_vector <- c(meal, "pizza")
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal) {
pizza_vector <- c(meal, "pizza")
return (pizza_vector)
}
add_pizza(meals)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meals)
better_meals
better_meals
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
better_meals
lintr::lint("exercise.R")
cd info201
setwd("~/Desktop/info201/ch8-lists/exercise-1")
lintr::lint("exercise.R")
?runif
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
random_num <- as.list(runif(10))
random_num
?round
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
lapply(random_num, round(1))
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
lapply(random_num, round, 1)
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
strsplit(sentence)
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- "tomorrow, and tomorrow, and tomorrow, creeps in this petty pace from day to day"
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
strsplit(sentence)
seahawks_scores <- c(26, 21, 42, 30)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
seahawks_against <- c(24, 12, 7, 24)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_scores, seahawks_against)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_scores, seahawks_against)
View(games)
# Create a vector of the opponent names corresponding to the games played
opponent_name <- c("Cardinals", "Cowboys", "Rams", "Jaguars")
# Assign your dataframe rownames of their opponents
rownames(games) <- opponent_name
View(games)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$seahawks_scores - games$seahawks_against
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- game$diff > 0
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
View(games)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawks_scores <- c(24, 21, 7, 24)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
seahawks_against <- c(26, 12, 42, 30)
view
view(games)
View(games)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawks_scores <- c(24, 21, 7, 24)
seahawks_scores <- c(24, 21, 7, 24)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
seahawks_against <- c(26, 12, 42, 30)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_scores, seahawks_against)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$seahawks_scores - games$seahawks_against
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponent_name <- c("Cardinals", "Cowboys", "Rams", "Jaguars")
# Assign your dataframe rownames of their opponents
rownames(games) <- opponent_name
# View your data frame to see how it has changed!
View(games)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee", 1:100))
employees
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100, 40000, 50000)
salaries
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- lapply(salaries_2017, runif, 100, -5000, 10000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- lapply(salaries_2017, runif, 100, -5000, 10000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- lapply(salaries_2017, runif, -5000, 10000)
salaries_2018
?runif
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2017 + runif(100, -5000, 10000)
salaries_2018
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salaries_2018, stringsAsFactors = FALSE)
hist(salaries)
View(salaries)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries_2018 - salaries_2017
employees <- c(paste("Employee", 1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2017 + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salaries_2018, stringsAsFactors = FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries_2018 - salaries_2017
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
got_raise <- salaries$change < 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of employee 57
# How many employees got a raise?
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
View(salaries)
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change < 0
View(salaries)
# What was the 2018 salary of employee 57
salaries[57, 3]
# How many employees got a raise?
salaries[salaries$got_raise]
# How many employees got a raise?
salaries[salaries$got_raise]
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change < 0
# How many employees got a raise?
salaries[salaries$got_raise]
# How many employees got a raise?
salaries[got_raise]
# How many employees got a raise?
salaries[salaries$change < 0]
# How many employees got a raise?
salaries[0, salaries$change < 0]
# How many employees got a raise?
salaries[, salaries$change < 0]
# How many employees got a raise?
salaries[, salaries$change < 0]
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change < 0
# How many employees got a raise?
salaries[, salaries$got_raise]
# How many employees got a raise?
sum(salaries[, salaries$got_raise])
# What was the dollar value of the highest raise?
max(salaries[salaries$change])
?max
# How many employees got a raise?
nrow(salaries[, salaries$got_raise, ])
# How many employees got a raise?
nrow(salaries[, salaries$got_raise = TRUE, ])
# How many employees got a raise?
nrow(salaries[, salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
max(salaries[salaries$change])
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change < 0
# How many employees got a raise?
nrow(salaries[, salaries$got_raise == TRUE, ])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE,])
# What was the dollar value of the highest raise?
max(salaries[salaries$change])
